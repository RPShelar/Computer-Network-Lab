from collections import defaultdict

def bfs_recursive(graph, queue):
    if not queue:
        return

    node = queue.pop(0)
    print(node, end=" ")

    for neighbor in graph[node]:
        if neighbor not in visited:
            visited.add(neighbor)
            queue.append(neighbor)

    bfs_recursive(graph, queue)

if __name__ == "__main__":
    graph = defaultdict(list)
    visited = set()

    while True:
        edge = input("Enter an edge (e.g., 'u v') or leave blank to finish: ")
        if not edge:
            break
        u, v = map(str, edge.split())
        graph[u].append(v)
        graph[v].append(u)  # Assuming an undirected graph

    start_node = input("Enter the starting node: ")
    visited.add(start_node)
    bfs_recursive(graph, [start_node])
